<?php
namespace [CURRENT_NAMESPACE];

use App\Core\Base\Structure\BaseStructure;
use [NAMESPACE]\Models\[MODULE_NAME];
use [NAMESPACE]\Transformers\[MODULE_NAME]Transformer;
use App\Core\Contracts\CanStructured;
use DataStructure;
use Permission;

class [MODULE_NAME]Structure extends BaseStructure implements CanStructured
{
    #ENABLE THIS PROPERTY IF YOU WANT TO USE MULTI LANGUAGE FEATURE
    //public $multi_language = true;

    #ENABLE THIS PROPERTY IF YOU DONT WANT TO USE THE NATIVE DATATABLE IN CRUD PAGE, AND YOU WANT TO DEFINE CUSTOM VIEW FOR EACH DATA ROW.
    //public $mode = 'custom'; // set ke mode custom untuk custom view menggantikan datatable
    //public $custom_html = '[LOWERCASE_MODULE_NAME]::custom-data';

    public function handle()
    {
        $this->registers([
            DataStructure::checker(),
            DataStructure::field('title')
                ->name('Title')
                ->inputType('text')
                ->createValidation('required', true)
                ->validationTranslation([
                    'title.required' => 'Please fill the title'
                ]),
            DataStructure::field('description')
                ->name('Description')
                ->hideTable()
                ->inputType('richtext'),
            DataStructure::switcher('is_active', 'Is Active')
        ]);
    }

    public function dataTableRoute()
    {
        return route('admin.[LOWERCASE_MODULE_NAME].datatable');
    }

    public function batchDeleteRoute()
    {
        return route('admin.[LOWERCASE_MODULE_NAME].delete');
    }

    public function importRoute()
    {
        return route('admin.[LOWERCASE_MODULE_NAME].pre-import');
    }

    public function exportRoute()
    {
        return route('admin.[LOWERCASE_MODULE_NAME].export');
    }

    //public function customFilter($context){
    //	$searched_field = $this->getSearchField('field_name');
    //	return $context;
    //}

    public function model()
    {
        return new [MODULE_NAME];
    }

    public function transformer()
    {
        return new [MODULE_NAME]Transformer;
    }
}